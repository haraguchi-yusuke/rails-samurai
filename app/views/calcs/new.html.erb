<h1>数字を入力して計算</h1>
　
 <%= form_with url: nums_path, local: true do |f| %>
   <%= f.text_field "input" %>
   <%= f.submit "計算" %>
 <% end %>
 
 <%= form_with url: nums2_path, local: true do |f| %>
  <%= f.text_field "input" %>
   <%= f.submit "計算" %>
 <% end %>
 計算結果は<%= @result %>です


<!--# ３．ビューファイルの作成（viewsファイルにhtmlファイルを作る）-->
<!--# appフォルダ→viewsフォルダ(※フォルダに作る、名前はルーティングでコントローラに使った名前今回は calcs というフォルダ）-->
<!--# そのフォルダの中にファイル作成→ファイルの名はにnew.html.erbというファイルを作る（newはルーティングで作った処理名、.html.erbは固定文言）-->
<!--# erb　は　embedded rubyの略（embeddedは埋め込みという意味)→htmlファイルにrubyを埋め込みますよっていうファイル-->
<!--# 例　views→calcs（フォルダ）→new.html.erb(ファイル名)となる-->

<!--４．$ rails s　でサーバーを起動（居る場所が重要（kakeiboフォルダにいる必要がある-->
<!--→プレビューから起動したら /nums をURLの一番後ろに入れてエンター（ルーティングで設定したURL名）-->
<!--更新したり、/numsを入れたりすると何が起きてるかというと、ブラウザというアプリケーションが-->
<!--getというメソッドと/numsという情報をrailsのサーバーに送っている→それをもとにルーティングを読んで-->
<!--どこで処理すればいいのか解釈して、コントローラーで処理し、コントローラーと同じ名前のviewが呼ばれて処理される→結果画面に処理される-->

<!--５．入力をするところを書いていく-->
<!--1.new.html.erbへ記載する　イコールつきの％なので画面に表示される
<!--2.送り先のルーティング→routes.rbに送る先を入力-->
<!--　post "/nums", to: "calcs#exec" #(exec=実行っていう意味) post=データーを送るっていう意味-->
<!--　→入力したらrails c で確認-->
<!--　 nums GET  /nums(.:format) calcs#new-->
<!--        POST /nums(.:format) calcs#exec-->
<!--↑の意味は、postにexecしたかったらnumsを使いなさいという意味-->
<!--3.new.html.erbへ記載する-->

<!--# 6、コントローラーで入力-->
<!--# getsとかpで入力を取って表示すると同じようなのをする。入力されたものを取って表示する作業をする-->
<!--# ここではgetsがつかえない。その代わりにparamsが使える。paramsで受け取ることができる。-->
<!--# 受け取るには名前が必要→それは検証でみるとわかる（viewの検証ツール）で-->
<!--# inputに対してnameというのがついている。送られてくる名前を表している。-->
<!--# なのでinputとなる。下記が例(classの間に入れる)-->
<!--#     def exec #execっていう名前にしたからexec-->
<!--#      input = params[:input]-->
<!--#      @result = input-->
<!--#      p input #変数確認したい時は、pで表示されるとターミナルに入力したのが表示される-->
<!--#      end-->
<!--# execだけど、exec.htmlではなく、またnewを表示したいのでrenderを使う-->
<!--# 下記を追加-->

<!--#      def exec #execっていう名前にしたからexec-->
<!--#      input = params[:input]-->
<!--#      @result = input-->
<!--#      p input #変数確認したい時は、pで表示されるとターミナルに入力したのが表示される-->
<!--#      render "new"-->
<!--#      end-->
